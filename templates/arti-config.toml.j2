# =============================================================================
# ⚠️  WARNING: This file is managed by Ansible - DO NOT EDIT MANUALLY!
# Any manual changes will be overwritten on the next Ansible run.
# Edit the template file or Ansible variables instead.
# =============================================================================
#
# Arti (Tor client) configuration for Bitcoin Knots integration
# Generated by Ansible
#
# This template configures Arti for secure, local use as a Tor client and proxy.
#
# References:
#   - https://gitlab.torproject.org/tpo/core/arti
#   - https://gitlab.torproject.org/tpo/core/arti/-/blob/main/crates/arti-config/arti.example.toml
#
# Edit variables in your playbook to customise deployment.
# =============================================================================

[storage]
state_dir = "{{ arti_data_dir }}/state"
cache_dir = "{{ arti_data_dir }}/cache"

[proxy]
# Default port to use when listening for SOCKS connections.  We always
# listen on localhost.
socks_listen = "{{ networking_arti.listen_address }}:{{ networking_arti.socks_port }}"

# Port to use to listen for DNS requests.  0 means disabled.
dns_listen = {{ networking_arti.dns_port }}



[logging]
# As above, but specify filtering directives for sending trace messages to
# the journald logging system.  Empty string means not to use journald.
journald = "{{ arti_systemd_name }}"

# Whether to log sensitive information (such as target hostnames and ip addresses)
#
# If set to `false` (the default), such information is not logged in messages of
# level `info` or higher.
log_sensitive_information = false

log_level = "{{ networking_arti.log_level }}"


[metrics]
# Arti can export metrics, offering a Prometheus scraper endpoint.
# Usually only used when providing Tor Hidden Services (Onion Services).
prometheus.listen = {{ networking_arti.metrics_port }}




[preemptive_circuits]
# If we have at least this many available circuits, we suspend
# construction of preemptive circuits. whether our available circuits
# support our predicted exit ports or not.
disable_at_threshold = 12

# At startup, which exit ports should we expect that the client will want?
# Also include standard ports for web traffic.
initial_predicted_ports = {{networking_arti.predicted_ports }}

# After we see the client request a connection to a new port, how long should we
# predict that the client will still want to have circuits available for that
# port? Bitcoin connections are long-lived, so increase this duration.
prediction_lifetime = "6 hours"

# How many available circuits should we try to have, at minimum, for each
# predicted exit port? Bitcoin benefits from multiple connections.
min_exit_circs_for_port = 6



[circuit_timing]

# Once a circuit has been used for a request, we stop giving it out for
# other requests after this time. Bitcoin connections can be long-lived,
# so increase this duration.
max_dirtiness = "30 minutes"

# When a circuit is requested, we keep trying to build circuits for up
# to this long before the request gives up. Bitcoin needs reliable connections.
request_timeout = "120 sec"

# When a circuit is requested, we make up to this many attempts to build
# circuits for it before the request gives up. Increase for reliability.
request_max_retries = 20

# If a circuit is finished that would satisfy a pending request, but the
# request is still waiting for its own circuits to complete, the request
# will wait this long before using the unexpectedly available circuit.
request_loyalty = "100 msec"



[stream_timeouts]

# How long should we wait before timing out a stream when connecting to a host?
connect_timeout = "30 sec"

# How long should we wait before timing out when resolving a DNS record?
resolve_timeout = "20 sec"

# How long should we wait before timing out when resolving a DNS PTR record?
resolve_ptr_timeout = "15 sec"




# Configuration for the system resources used by Arti.
[system]

# What is the maximum number of file descriptors which should be available
# to Arti when we launch? Bitcoin nodes maintain many connections.
max_files = 32768
