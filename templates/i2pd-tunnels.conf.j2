# ------------------------------------------------------------------------------
# i2pd Tunnels Configuration for Bitcoin Core
# ------------------------------------------------------------------------------
#
# This file configures I2P tunnels specifically optimised for Bitcoin Core
# connections over the I2P network for enhanced privacy and anonymity.
#
# Bitcoin Core I2P Configuration Notes:
#   - Use client tunnels for outbound Bitcoin peer connections
#   - Use server tunnels if you want to accept inbound I2P connections
#   - Adjust tunnel quantities based on your connection needs
#   - Higher tunnel counts provide better anonymity but use more resources
#
# Firewall Configuration:
#   - Port 7070: I2P web console (localhost only)
#   - Port 8332: Bitcoin RPC (localhost only) 
#   - Port 8333: Bitcoin P2P server (localhost only)
#   - Port 8334: Bitcoin I2P client tunnel (localhost only)
#   - Ports 50001-50002: Electrum server (localhost only)
#   - Ports 9100-9200: I2P router (external access required)
#
# Usage:
#   - Configure Bitcoin Core with: -i2psam=127.0.0.1:7656
#   - Bitcoin will automatically create tunnels via SAM interface
#   - These tunnels provide additional manual configuration if needed
#
# References:
#   - https://github.com/bitcoin/bitcoin/blob/master/doc/i2p.md
#   - https://i2pd.readthedocs.io/en/latest/user-guide/tunnels/
#
# Last updated: {{ ansible_date_time.date }}
# ------------------------------------------------------------------------------


# ==============================================================================
# BITCOIN CORE CLIENT TUNNEL (OUTBOUND CONNECTIONS)
# ==============================================================================

[bitcoin-client]
# Tunnel type: 'client' creates outbound connections to I2P destinations
type = client

# Local address and port that Bitcoin Core connects to for I2P access
# Bitcoin Core will connect to this local endpoint to reach I2P peers
address = 127.0.0.1
port = {{ i2pd.tunnel.bitcoin.client.port | default(9081) }}

# TRANSIENT destination means this tunnel doesn't persist across restarts
# Each restart gets a new I2P identity for enhanced privacy
destination = TRANSIENT

# Bitcoin client tunnel for making outbound I2P connections
# Bitcoin Core will use this for connecting to I2P Bitcoin peers
keys = bitcoin-client-keys.dat

# Tunnel configuration for better Bitcoin performance
# inbound.length: Number of hops for incoming data (more hops = more anonymity)
inbound.length = 3

# inbound.quantity: Number of parallel inbound tunnels (more = better reliability)
inbound.quantity = 3

# outbound.length: Number of hops for outgoing data
outbound.length = 3

# outbound.quantity: Number of parallel outbound tunnels
outbound.quantity = 3

# Reduce tunnel build timeout for faster connections
# leaseSetType 3 uses shorter, more efficient cryptographic keys
inbound.leaseSetType = 3
outbound.leaseSetType = 3


# ==============================================================================
# BITCOIN CORE SERVER TUNNEL (INBOUND CONNECTIONS)
# ==============================================================================

[bitcoin-server]
# Tunnel type: 'server' accepts incoming connections from other I2P nodes
type = server

# Local address and port where your Bitcoin Core node is running
# Other I2P Bitcoin nodes will connect to your node through this tunnel
address = 127.0.0.1
port = {{ i2pd.tunnel.bitcoin.server.port | default(9082) }}

# Your Bitcoin node's I2P address will be saved in this keys file
# This file contains your persistent I2P identity for the Bitcoin server
keys = bitcoin-server-keys.dat

# Server tunnel configuration
# inbound.length: Hops for data coming to your server (3 = good anonymity)
inbound.length = 3

# inbound.quantity: More tunnels = better availability for incoming connections
inbound.quantity = 5

# outbound.length: Hops for responses sent back to connecting peers
outbound.length = 3

# outbound.quantity: Parallel tunnels for sending responses
outbound.quantity = 3

# Enable longer lease times for server availability
# leaseSetType 3 provides efficient crypto while maintaining good performance
inbound.leaseSetType = 3

# Publish this service in the I2P network database
# false = publish your Bitcoin node so other I2P users can discover it
# true = keep your node private (only direct connections via .b32.i2p address)
i2cp.dontPublishLeaseSet = false


# # ==============================================================================
# # ADDITIONAL BITCOIN ELECTRS SERVICES
# # ==============================================================================

# # Uncomment and configure these if you run additional Bitcoin services
# # that you want to expose over I2P (like Electrum server, block explorer, etc.)

# [electrum-server]
# # Tunnel type: 'server' to accept connections from Electrum wallet clients
# type = server

# # Local address and port where electrs is running
# # Electrum clients will connect to your electrs instance via I2P
# address = 127.0.0.1
# port = 50001

# # Keys file stores the persistent I2P identity for your Electrum server
# # Clients will use the .b32.i2p address derived from this identity
# keys = electrum-server-keys.dat

# # Electrs tunnel configuration
# # inbound.length: Anonymity hops for incoming Electrum client connections
# inbound.length = 3

# # inbound.quantity: Parallel tunnels for client connections (3 = good availability)
# inbound.quantity = 3

# # outbound.length: Hops for sending responses back to Electrum clients
# outbound.length = 1

# # outbound.quantity: Single tunnel sufficient for electrs responses
# outbound.quantity = 1

# # Publish electrs service for discovery by I2P Electrum clients
# # false = make your electrs discoverable in the I2P network database
# # true = keep private (clients need your exact .b32.i2p address)
# i2cp.dontPublishLeaseSet = false

# # Optional: Electrum SSL server (if electrs is configured with SSL)
# # [electrum-server-ssl]
# # # SSL-enabled Electrum server for encrypted client connections
# # type = server
# # 
# # # Local SSL port where electrs serves encrypted connections
# # address = 127.0.0.1
# # port = 50002
# # 
# # # Separate keys file for SSL server identity
# # keys = electrum-server-ssl-keys.dat
# # 
# # # Same tunnel configuration as regular Electrum server
# # inbound.length = 3
# # inbound.quantity = 3
# # outbound.length = 1
# # outbound.quantity = 1
# # 
# # # Publish SSL service for discovery
# # i2cp.dontPublishLeaseSet = false


# [bitcoin-rpc]
# # Tunnel type: 'server' for Bitcoin Core RPC API access over I2P
# type = server

# # Local address and port where Bitcoin Core RPC is running
# # WARNING: Only expose RPC over I2P if you understand the security implications
# address = 127.0.0.1
# port = 8332

# # Keys file for RPC server I2P identity
# keys = bitcoin-rpc-keys.dat

# # RPC should have stronger security settings
# # inbound.length: More hops for better security (RPC is sensitive)
# inbound.length = 3

# # inbound.quantity: Fewer tunnels to limit RPC access points
# inbound.quantity = 2

# # outbound.length: More hops for RPC responses
# outbound.length = 3

# # outbound.quantity: Limited parallel tunnels for security
# outbound.quantity = 2

# # Don't publish RPC service publicly
# # true = keep RPC private, only accessible via direct .b32.i2p address
# # SECURITY: Never set this to false unless you fully understand the risks
# i2cp.dontPublishLeaseSet = true
