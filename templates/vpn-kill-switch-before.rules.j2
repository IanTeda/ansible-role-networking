# ============================================================================ #
# OpenVPN Kill Switch UFW Rules Template                                       #
# ============================================================================ #
# ⚠️ WARNING: This file is managed by Ansible - DO NOT EDIT MANUALLY!       ⚠️ 
# Any manual changes will be overwritten on the next Ansible run.
# Edit the template file or Ansible variables instead.
#
# Template:   roles/openvpn/templates/openvpn_kill_switch.rules.j2
# Deploy to:  /etc/ufw/before.rules
# =============================================================================
#
# Rules that should be run before the ufw command line added rules. Custom
# rules should be added to one of these chains:
#   ufw-before-input
#   ufw-before-output
#   ufw-before-forward
#
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Host: {{ ansible_fqdn }}
# Updated: 2025-07-16
# -----------------------------------------------------------------------------

*filter
:ufw-before-input - [0:0]
:ufw-before-output - [0:0]
:ufw-before-forward - [0:0]

# Allow all on loopback
-A ufw-before-input -i lo -j ACCEPT
-A ufw-before-output -o lo -j ACCEPT

# Allow ICMP (ping)
-A ufw-before-input -p icmp -j ACCEPT
-A ufw-before-output -p icmp -j ACCEPT

# quickly process packets for which we already have a connection
-A ufw-before-input -m state --state RELATED,ESTABLISHED -j ACCEPT
-A ufw-before-output -m state --state RELATED,ESTABLISHED -j ACCEPT
-A ufw-before-forward -m state --state RELATED,ESTABLISHED -j ACCEPT

# drop INVALID packets
-A ufw-before-input -m state --state INVALID -j DROP



# --------------------- [START VPN KILL SWITCH] -------------------------------

##-- Allow all traffic (outgoing and incoming) through the VPN tunnel interface (tun0)
# This ensures that once the VPN is connected, all traffic can flow through it. This 
# is the first and most important rule for the kill switch
-A ufw-before-output -o tun0 -j ACCEPT
-A ufw-before-input -i tun0 -j ACCEPT

##-- Allow all outgoing traffic to local/private networks (LAN) 
# This allows the system to communicate normally when the VPN is not connected.
-A ufw-before-output -d 10.0.0.0/8 -j ACCEPT
-A ufw-before-output -d 172.16.0.0/12 -j ACCEPT
-A ufw-before-output -d 192.168.0.0/16 -j ACCEPT

##-- Allow DNS quiers to public VPN DNS servers (UDP 53). 
# This allows the system to resolve DNS queries when tun0 is not up, such as getting
# the VPN server IPs from the DNS. 
# NOTE: Update with your VPN providers dns servers
-A ufw-before-output -o {{ vpn_client_primary_network_interface }} -p udp -d 209.222.18.218 --dport 53 -j ACCEPT
-A ufw-before-output -o {{ vpn_client_primary_network_interface }} -p udp -d 209.222.18.222 --dport 53 -j ACCEPT

# Allow cloudflare DNS server
-A ufw-before-output -o {{ vpn_client_primary_network_interface }} -p udp -d 1.1.1.1 --dport 53 -j ACCEPT

# Allow Quad9 DNS Server
-A ufw-before-output -o {{ vpn_client_primary_network_interface }} -p udp -d 9.9.9.9 --dport 53 -j ACCEPT

##-- Allow DHCP client to work (UDP 67/68)
# This allows the system to obtain an IP address from the DHCP server.
-A ufw-before-output -o {{ vpn_client_primary_network_interface }} -p udp --sport 68 --dport 67 -j ACCEPT

##-- Allow through physical interface, outgoing to VPN client server IPs (resolved in the ansible task, add updated through bash script) + tcp/udp port

# [START DYNAMIC VPN SERVER RULES]
# This is managed by 'vpn-server-update.sh' and dynamically replaced. Text is
# here to confirm that the script is working correctly.
{% for ip in vpn_client_server_ips %}
-A ufw-before-output -o {{ vpn_client_primary_network_interface }} -d {{ ip }} -p tcp --dport {{ vpn_client_server_port }} -j ACCEPT
-A ufw-before-output -o {{ vpn_client_primary_network_interface }} -d {{ ip }} -p udp --dport {{ vpn_client_server_port }} -j ACCEPT
{% endfor %}
# [END DYNAMIC VPN SERVER RULES]

#-- Drop all other outgoing traffic on the primary network interface.
# This prevents all leaks if the VPN is not connected.
#-A ufw-before-output -o {{ vpn_client_primary_network_interface }} -j LOG --log-prefix "UFW-KILLSWITCH-DROP: " #<-- Uncomment this line to log dropped packets
-A ufw-before-output -o {{ vpn_client_primary_network_interface }} -j DROP

##-- Allow incoming traffic from local/private networks (LAN)
# This allows the system to communicate normally when the VPN is not connected.
-A ufw-before-input -s 10.0.0.0/8 -j ACCEPT
-A ufw-before-input -s 172.16.0.0/12 -j ACCEPT
-A ufw-before-input -s 192.168.0.0/16 -j ACCEPT

##-- Drop all other outgoing traffic on the physical interface {{ vpn_client_primary_network_interface }} 
# (blocks leaks if VPN goes down)
#-A ufw-before-output -o {{ vpn_client_primary_network_interface }} -j LOG --log-prefix "UFW-KILLSWITCH-DROP: " #<-- Uncomment logging if you want to see dropped packets in the logs
-A ufw-before-input -i {{ vpn_client_primary_network_interface }} -j DROP

# ------------------------ [END VPN KILL SWITCH] -------------------------------

COMMIT