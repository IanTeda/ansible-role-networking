---

# ====================================================================================================
# Ansible Task File: roles/networking/tasks/ssh-debian.yaml
# ----------------------------------------------------------------------------------------------------
# Purpose: Harden SSH server configuration on Debian-based systems using Ansible.
# Managed by: Ansible (do not edit on target systems)
#
# Features:
#   - Strong encryption (modern ciphers, MACs, KEX)
#   - Disables password authentication (key-based only)
#   - Brute force protection (fail2ban, sshguard)
#   - No root login allowed
#   - Session timeout and idle controls
#   - MOTD/banner hardening
#   - Secure SFTP configuration
#   - Automated config and service backups
#   - UFW firewall integration
#   - Health and verification checks
#
# Requirements:
#   - Debian-based system
#   - Systemd
#   - Sufficient privileges (become: true)
#
# Security Notes:
#   - SSH config is backed up before changes
#   - Password authentication and root login are disabled
#   - Only allowed users/groups can access SSH
#
# Troubleshooting:
#   - Check logs: journalctl -u ssh, /var/log/auth.log
#   - Test SSH: ssh -v user@host -p <port>
#   - If locked out, use console or recovery access
#
# References:
#   - https://infosec.mozilla.org/guidelines/openssh.html
#   - https://www.ssh-audit.com/hardening_guides.html
#   - https://github.com/dev-sec/ansible-ssh-hardening
#
# Changelog:
#   - 2025-07-30: Header updated for clarity and automation
# ====================================================================================================


## 00. SET SSHD ANSIBLE FACTS
# This makes it easier to read the ansiblssh_config_filee tasks
# -----------------------------------------------------------------------------

- name: Set networking/ssh Ansible facts
  ansible.builtin.set_fact:
    ssh_user: "{{ networking_ssh.user }}"
    ssh_group: "{{ networking_ssh.group }}"
    ssh_config_dir: "/etc/ssh"
    ssh_config_file: "/etc/ssh/sshd_config"
    ssh_systemd_name: "ssh"
    ssh_service_file: "/lib/systemd/system/ssh.service"
    ssh_port: "{{ networking_ssh.listen_port }}"
    ssh_listen_address: "{{ networking_ssh.listen_address }}"
  tags:
    - install
    - config
    - healthcheck
    - uninstall

- name: Get wired network interface name (excluding loopback and virtual)
  ansible.builtin.shell: |
    ip -o link show | awk -F': ' '{print $2}' | grep -E '^(en|eth)' | grep -v 'lo' | head -n1
  register: wired_interface
  changed_when: false
  tags:
    - install
    - config
    - verify
    - healthcheck
    - debug
    - facts

- name: Set wired network interface as Ansible fact
  ansible.builtin.set_fact:
    ssh_primary_network_interface: "{{ wired_interface.stdout }}"
  when: wired_interface.stdout != ''
  tags:
    - install
    - config
    - verify
    - healthcheck
    - debug
    - facts

- name: Display ssh_primary_network_interface variables for debugging
  ansible.builtin.debug:
    var: ssh_primary_network_interface
  tags:
    - debug

- name: Display networking/ssh variables for debugging
  ansible.builtin.debug:
    var: boilerplate_ssh
  tags:
    - debug

- name: Display sshd facts for debugging
  ansible.builtin.debug:
    msg:
      - "Fact -> ssh_user: {{ ssh_user }}"
      - "Fact -> ssh_group: {{ ssh_group }}"
      - "Fact -> ssh_config_dir: {{ ssh_config_dir }}"
      - "Fact -> ssh_config_file: {{ ssh_config_file }}"
      - "Fact -> ssh_systemd_name: {{ ssh_systemd_name }}"
      - "Fact -> ssh_service_file: {{ ssh_service_file }}"
  tags:
    - debug


## 01. INSTALL AND CONFIGURE SSHD
# This installs and configures the SSH daemon with hardening measures
# -----------------------------------------------------------------------------

- name: Ensure UFW is disabled to avoid lock out
  community.general.ufw:
    state: disabled
  become: true
  tags:
    - install
    - config

- name: Ensure openssh-server and hardening packages are installed
  ansible.builtin.apt:
    name: 
      - openssh-server             # SSH server
      - sshguard                   # Additional brute force protection
      - auditd                     # For SSH access auditing
    state: present
    update_cache: yes
  become: true
  tags:
    - install

- name: Create ssh_users group "{{ networking_ssh.user_access_group }}"
  ansible.builtin.group:
    name: "{{ networking_ssh.user_access_group }}"
    state: present
  become: true
  tags:
    - install
    - config

- name: Add users to "{{ networking_ssh.user_access_group }}" group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: "{{ networking_ssh.user_access_group }}"
    append: yes
  loop: "{{ networking_ssh.user_access_list }}"
  become: true
  tags:
    - install
    - config

- name: Backup original sshd_config
  ansible.builtin.copy:
    src: "{{ ssh_config_file }}"
    dest: /etc/ssh/sshd_config.bak
    remote_src: yes
    owner: "{{ ssh_user }}"
    group: "{{ ssh_group }}"
    mode: '0644'
    force: false
  become: true
  tags:
    - install
    - config

- name: "Deploy SSHD config file to {{ ssh_config_file }}"
  ansible.builtin.template:
    src: templates/sshd-config.j2
    dest: "{{ ssh_config_file }}"
    owner: "{{ ssh_user }}"
    group: "{{ ssh_group }}"
    mode: '0644'
    backup: yes
  become: true
  tags:
    - install
    - config

- name: Verify SSH configuration syntax
  ansible.builtin.command: sshd -t -f {{ ssh_config_file }}
  register: sshd_config_check
  changed_when: false
  failed_when: sshd_config_check.rc != 0
  become: true
  tags:
    - install
    - config
    - verify

- name: Backup original ssh.service file
  ansible.builtin.copy:
    src: "{{ ssh_service_file }}"
    dest: "{{ ssh_service_file }}.bak"
    remote_src: yes
    owner: "{{ ssh_user }}"
    group: "{{ ssh_group }}"
    mode: '0644'
    force: no
  become: true
  tags:
    - install
    - config

- name: "Deploy SSH service file to {{ ssh_service_file }}"
  ansible.builtin.template:
    src: templates/ssh-systemd.service.j2
    dest: "{{ ssh_service_file }}"
    owner: "{{ ssh_user }}"
    group: "{{ ssh_group }}"
    mode: '0644'
    backup: yes
  become: true
  notify: SSH Restart
  tags:
    - install
    - config

- name: Verify SSH systemd service config is valid
  ansible.builtin.command: "systemd-analyze verify {{ ssh_service_file }}"
  register: systemd_verify
  changed_when: false
  failed_when: systemd_verify.rc != 0
  tags:
    - install
    - config
    - verify

- name: Disable all update-motd.d scripts (removes execute permission)
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0644'
  with_fileglob:
    - /etc/update-motd.d/*
  ignore_errors: true
  become: true
  tags:
    - install
    - config

- name: Disable /etc/motd directory (remove execute permission)
  ansible.builtin.copy:
    dest: /etc/motd
    content: ""
    owner: root
    group: root
    mode: '0644'
  become: true
  tags:
    - install
    - config

- name: Deploy SSH UFW application profile "/etc/ufw/applications.d/ssh"
  ansible.builtin.template:
    src: templates/ssh-ufw-profile.j2
    dest: /etc/ufw/applications.d/ssh
    mode: '0644'
    owner: root
    group: root
  become: true
  tags:
    - install
    - config

- name: Reload UFW SSH application profiles
  ansible.builtin.command: "ufw app update ssh"
  become: true
  changed_when: false
  failed_when: false
  tags:
    - install
    - config

- name: Allow SSH through UFW from local networks at number 1
  ansible.builtin.ufw:
    rule: allow
    name: "SSH Custom Port"
    comment: "Allow SSH ({{ ssh_port }}/tcp) from LOCAL NET - Anti Lock-Out"
    src: "{{ item }}"
  loop: "{{ networking_networks.local }}"
  become: true
  tags:
    - install
    - config
    - firewall

- name: Ensure SSH service is enabled and restarted
  ansible.builtin.service:
    name: ssh
    state: restarted
    enabled: yes
  become: true
  tags:
    - install
    - config

- name: Ensure UFW is enabled
  community.general.ufw:
    state: enabled
  become: true
  tags:
    - install
    - config

- name: Add SSHD logs journal block to config.alloy from file
  ansible.builtin.blockinfile:
    path: /etc/alloy/config.alloy
    marker: "// {mark} ANSIBLE MANAGED BLOCK: SSHD logs"
    insertbefore: "//////////////////////////// ADD ABOVE THE LINE ///////////////////////////////" 
    block: "{{ lookup('file', 'files/sshd-config-block.alloy') }}"
  become: true
  notify: Alloy Restart
  tags:
    - alloy

- name: Verify Alloy configuration file is valid
  ansible.builtin.command: "/usr/local/bin/alloy validate /etc/alloy/config.alloy"
  register: alloy_config_verify
  changed_when: false
  failed_when: alloy_config_verify.rc != 0
  become: true
  tags:
    - alloy



# Verification and Health Checks
# -----------------------------------------------------------------------------

- name: Verify SSH service is active and listening
  ansible.builtin.command: systemctl is-active ssh
  register: ssh_service_status
  changed_when: false
  failed_when: ssh_service_status.stdout.strip() != "active"
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Verify SSH is listening on configured port
  ansible.builtin.wait_for:
    port: "{{ networking_ssh.listen_port }}"
    host: "{{ networking_ssh.listen_address }}"
    timeout: 10
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Verify SSH users group exists
  ansible.builtin.command: getent group {{ networking_ssh.user_access_group }}
  register: ssh_group_check
  changed_when: false
  failed_when: ssh_group_check.rc != 0
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Verify users are in SSH group
  ansible.builtin.command: groups {{ item }}
  register: user_groups_check
  changed_when: false
  failed_when: networking_ssh.user_access_group not in user_groups_check.stdout
  loop: "{{ networking_ssh.user_access_list }}"
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Verify password authentication is disabled
  ansible.builtin.command: grep '^PasswordAuthentication no' /etc/ssh/sshd_config
  register: password_auth_check
  changed_when: false
  failed_when: password_auth_check.rc != 0
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Verify root login is disabled
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: 'PermitRootLogin no'
    state: present
  check_mode: yes
  register: root_login_check
  failed_when: root_login_check.changed
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check SSH configuration for common hardening settings
  ansible.builtin.command: grep -E "^(MaxAuthTries|MaxSessions|ClientAliveInterval)" /etc/ssh/sshd_config
  register: ssh_hardening_check
  changed_when: false
  failed_when: ssh_hardening_check.rc != 0
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Display SSH hardening summary
  ansible.builtin.debug:
    msg:
      - "SSH Hardening Complete:"
      - "  - SSH Service: {{ ssh_service_status.stdout }}"
      - "  - SSH Group: {{ ssh_group }} exists"
      - "  - Password Auth: Disabled"
      - "  - Root Login: Disabled"
      - "  - SSH Port: {{ networking_ssh.listen_port }} (listening)"
  tags:
    - install
    - config
    - verify
    - healthcheck