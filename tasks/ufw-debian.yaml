---
# UFW FIREWALL HARDENING TASKS
# ============================
#
# This task file configures the Uncomplicated Firewall (UFW) for hardening on Debian-based systems.
#
# Features:
#   - Installs and enables UFW
#   - Allows SSH access only from specified local networks to prevent lockout
#   - Allows all traffic from localhost
#   - Denies all other incoming connections by default
#
# Usage:
#   Include this file in your playbook or role to apply a secure, local-network-only firewall policy.
#
# Requirements:
#   - The 'community.general' collection for the ufw module
#   - Define or adjust 'networking_networks.local' as needed for your environment
#

## 00. SET UFW ANSIBLE FACTS
# This makes it easier to read the ansible tasks
# -----------------------------------------------------------------------------

- name: Set UFW role facts
  ansible.builtin.set_fact:
    ufw_user: "{{ networking_ufw.user }}"
    ufw_group: "{{ networking_ufw.group }}"
    ufw_config_dir: "/etc/ufw"
    ufw_config_file: "/etc/ufw/ufw.conf"
    ufw_before_rules_file: "/etc/ufw/before.rules"
    ufw_binary_path: "/usr/sbin/ufw"
    ufw_systemd_name: "ufw"
    ufw_primary_network_interface: "{{ networking_networks.primary_network_interface }}"
  tags:
    - install
    - config
    - healthcheck
    - uninstall

- name: Display UFW variables for debugging
  ansible.builtin.debug:
    var: networking_ufw
  tags:
    - debug

- name: Display UFW facts for debugging
  ansible.builtin.debug:
    msg:
      - "Fact -> ufw_user: {{ ufw_user }}"
      - "Fact -> ufw_group: {{ ufw_group }}"
      - "Fact -> ufw_config_dir: {{ ufw_config_dir }}"
      - "Fact -> ufw_config_file: {{ ufw_config_file }}"
      - "Fact -> ufw_before_rules_file: {{ ufw_before_rules_file }}"
      - "Fact -> ufw_binary_path: {{ ufw_binary_path }}"
      - "Fact -> ufw_systemd_name: {{ ufw_systemd_name }}"
      - "Fact -> ufw_primary_network_interface: {{ ufw_primary_network_interface }}"
  tags:
    - debug

- name: Confirm UFW uninstallation
  ansible.builtin.pause:
    prompt: |
      ‚ö†Ô∏è  WARNING: UFW Uninstallation Confirmation ‚ö†Ô∏è

      You are about to completely uninstall the UFW service from this system.
      
      This will remove:
      üóëÔ∏è  UFW APT package
      üóëÔ∏è  Configuration directory: /etc/ufw/
      
      Are you sure you want to proceed with the uninstallation? (yes/no)
  register: uninstall_confirmation
  tags:
    - never
    - uninstall

- name: Uninstallation Aborted
  ansible.builtin.fail:
    msg: |
      üõë Uninstallation aborted by user
      
      The ufw service remains installed and operational.
      No changes have been made to the system.
  when: not (uninstall_confirmation.user_input | bool)
  tags:
    - never
    - uninstall



## 03. DOWNLOAD UFW PACKAGE
# This section downloads the ufw package
# -----------------------------------------------------------------------------

- name: Ensure UFW is installed
  ansible.builtin.apt:
    name: ufw
    state: present
    update_cache: yes
    force: true
  become: true
  tags:
    - install


## 01. SHUTDOWN UFW SERVICES
# This section ensures that the service is stopped before config any changes and 
# updates are applied to prevent conflict issues.
# -----------------------------------------------------------------------------

- name: Stop and disable UFW service for uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.systemd:
    name: "{{ ufw_systemd_name }}"
    state: stopped
    enabled: no
  become: true
  failed_when: false
  tags:
    - uninstall
    - never

- name: Uninstall UFW package
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.apt:
    name:
      - ufw
    state: absent
    update_cache: true
  become: true
  tags:
    - never
    - uninstall



## 04. SETUP CONFIG FILES FOR OPENVPN
# This section sets up the configuration files file for the service
# -----------------------------------------------------------------------------

- name: Ensure UFW service enabled and started
  ansible.builtin.systemd:
    name: "{{ ufw_systemd_name }}"
    state: started
    enabled: true
  become: true
  tags:
    - install
    - config

- name: Ensure UFW is disabled to avoid lock out
  community.general.ufw:
    state: disabled
  become: true
  tags:
    - install
    - config

- name: Restore default rules from package defaults in "/usr/share/ufw/"
  ansible.builtin.copy:
    src: /usr/share/ufw/{{ item }}
    dest: /etc/ufw/{{ item }}
    owner: root
    group: root
    mode: '0644'
    remote_src: yes
  become: true
  loop:
    - after6.rules
    - after.init
    - after.rules
    - before6.rules
    - before.init
    - before.rules
    - ufw.conf
    - user6.rules
    - user.rules
  tags:
    - install
    - config

- name: Allow all traffic from localhost
  community.general.ufw:
    rule: allow
    src: 127.0.0.1
    comment: "ALLOW ALL traffic from LOCALHOST"
  become: true
  notify: UFW Restart 
  tags:
    - install
    - config


- name: Deploy SSH application profile
  ansible.builtin.template:
    src: templates/ssh-ufw-profile.j2
    dest: "/etc/ufw/applications.d/ssh"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags:
    - install
    - config

- name: Reload UFW SSH application profiles
  ansible.builtin.command: "ufw app update ssh"
  become: true
  changed_when: false
  failed_when: false
  tags:
    - install
    - config

- name: Allow SSH connections - anti lockout
  community.general.ufw:
    rule: allow
    name: SSH
    comment: "ALLOW SSH (22/tcp) from LOCAL NET - ANTI LOCKOUT"
    src: '{{ item }}'
  loop: "{{ networking_networks.local }}"
  become: true
  notify: UFW Restart 
  tags:
    - install
    - config

- name: Reload UFW to apply changes
  ansible.builtin.command: ufw reload
  become: true
  changed_when: false
  tags:
    - install
    - config
    - reload

- name: Enable UFW and ensure it is running
  community.general.ufw:
    state: enabled
    policy: deny
  become: true
  tags:
    - install
    - config

- name: Remove UFW config folder
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop:
    - { path: "/etc/ufw",   mode: "u=rwx,g=rw,o=" }
  become: true
  tags:
    - never 
    - uninstall


## VERIFICATIONS & HEALTH CHECKS
# Confirm the operations of the firewall
# ------------------------------------------------------------------------------

- name: Check UFW status is active
  ansible.builtin.command: ufw status
  register: ufw_status
  changed_when: false
  failed_when: "'Status: active' not in ufw_status.stdout"
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Ensure UFW default policy is deny incoming
  ansible.builtin.command: ufw status verbose
  register: ufw_policy
  changed_when: false
  failed_when: "'Default: deny (incoming)' not in ufw_policy.stdout"
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Ensure localhost is allowed
  ansible.builtin.command: ufw status
  register: ufw_localhost
  changed_when: false
  failed_when: "'127.0.0.1' not in ufw_localhost.stdout"
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Ensure ANTI LOCKOUT is allowed
  ansible.builtin.command: ufw status
  register: ufw_localhost
  changed_when: false
  failed_when: "'ALLOW SSH (22/tcp) from LOCAL NET - ANTI LOCKOUT' not in ufw_localhost.stdout"
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Display UFW status for review
  ansible.builtin.command: ufw status verbose
  register: ufw_status_verbose
  changed_when: false
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Show UFW status output
  ansible.builtin.debug:
    var: ufw_status_verbose.stdout
  tags:
    - install
    - config
    - verify
    - healthcheck