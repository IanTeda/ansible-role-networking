---
# =============================================================================
# OpenVPN + VPN Kill Switch - Ansible Tasks
# =============================================================================
# ⚠️ WARNING: This file is managed by Ansible - DO NOT EDIT MANUALLY! ⚠️
# Any manual changes will be overwritten on the next Ansible run.
# Edit the template file or Ansible variables instead.
# -----------------------------------------------------------------------------
# File: roles/networking/tasks/vpn-debian.yaml
# Purpose: Installs, configures, and manages OpenVPN client and UFW-based VPN kill switch.
#
# Features:
#   - Installs OpenVPN and required dependencies
#   - Downloads and extracts OpenVPN configuration files
#   - Deploys selected .ovpn config and credentials securely
#   - Ensures OpenVPN uses the correct authentication file
#   - Enables and starts the OpenVPN client service
#   - Configures UFW firewall rules as a kill switch to block all non-VPN traffic
#   - Manages dynamic VPN server rules and systemd automation
#   - Provides uninstall and restore tasks
#
# Variables required:
#   - vault_vpn_username: VPN account username (should be stored securely)
#   - vault_vpn_password: VPN account password (should be stored securely)
#
# Notes:
#   - Adjust the .ovpn file selection to match your preferred VPN server location
#   - Update network interface names (e.g., eth0) if your system uses different names
#   - The kill switch rules allow LAN access and block leaks if the VPN goes down
#   - Ensure UFW is enabled and properly configured on your system
#
# Troubleshooting:
#   - If the VPN connection fails, check the OpenVPN logs: sudo journalctl -u openvpn@client -f
#   - Confirm interfaces with: ip a
#   - Confirm routing with: ip route
#   - Disable the vpn kill switch: sudo ufw disable
#   - Update the dynamic ip address for the vpn server: sudo bash /usr/local/sbin/vpn-dynamic-server-update.sh
# =============================================================================

## 00. SET OPENVPN ANSIBLE FACTS
# This makes it easier to read the ansible tasks
# -----------------------------------------------------------------------------

- name: Set OpenVPN role facts
  ansible.builtin.set_fact:
    vpn_client_user: "{{ networking_openvpn_client.user }}"
    vpn_client_group: "{{ networking_openvpn_client.group }}"
    vpn_client_config_dir: "/etc/openvpn"
    vpn_client_config_file: "/etc/openvpn/client.conf"
    vpn_client_binary_path: "/usr/sbin/openvpn"
    vpn_client_systemd_name: "openvpn@client"
    vpn_client_config_download: "{{ networking_openvpn_client.config_download }}"
    vpn_client_server_hostname: "{{ networking_openvpn_client.vpn_server }}"
    vpn_server_dynamic_update_script: "/usr/local/sbin/vpn-dynamic-server-update.sh"
  tags:
    - install
    - config
    - monitoring
    - healthcheck
    - uninstall

- name: Display OpenVPN variables for debugging
  ansible.builtin.debug:
    var: networking_openvpn_client
  tags:
    - debug

- name: Display OpenVPN facts for debugging
  ansible.builtin.debug:
    msg:
      - "Fact -> vpn_client_user: {{ vpn_client_user }}"
      - "Fact -> vpn_client_group: {{ vpn_client_group }}"
      - "Fact -> vpn_client_config_dir: {{ vpn_client_config_dir }}"
      - "Fact -> vpn_client_config_file: {{ vpn_client_config_file }}"
      - "Fact -> vpn_client_binary_path: {{ vpn_client_binary_path }}"
      - "Fact -> vpn_client_systemd_name: {{ vpn_client_systemd_name }}"
      - "Fact -> vpn_client_config_download: {{ vpn_client_config_download }}"
  tags:
    - debug



## 01. SHUTDOWN OPENVPN SERVICE AND DISABLE UFW
# This section ensures that the service is stopped before any config changes and
# updates are applied to prevent conflict issues.
# -----------------------------------------------------------------------------

- name: Disable UFW to kill the VPN Kill Switch, download configs and apply rules
  community.general.ufw:
    state: disabled
  become: true
  changed_when: false
  tags:
    - install
    - config
    - restore

- name: Check if OpenVPN service exists
  ansible.builtin.stat:
    path: "/lib/systemd/system/{{ vpn_client_systemd_name }}.service"
  register: service_file
  tags:
    - install
    - config

- name: Ensure OpenVPN service is stopped before modifying
  ansible.builtin.systemd:
    name: "{{ vpn_client_systemd_name }}"
    state: stopped
  become: true
  failed_when: false
  when: service_file.stat.exists
  tags:
    - install
    - config



## 02. SET UP OPENVPN USER & CREATE SERVICE DIRECTORIES
# This section sets up the system user and group to run the service and create 
# all the directories for the service
# -----------------------------------------------------------------------------

# Nil: This is handled by the apt package manager


## 03. DOWNLOAD OPENVPN PACKAGE
# This section adds the openvpn repository and downloads the package
# -----------------------------------------------------------------------------

- name: Install OpenVPN required packages
  ansible.builtin.apt:
    name:
      - openvpn
      - unzip
    state: present
    update_cache: true
  become: true
  tags:
    - install



## 04. SETUP CONFIG FILE FOR OPENVPN
# This section sets up the configuration files file for the service
# -----------------------------------------------------------------------------

- name: Download OpenVPN configuration bundle
  ansible.builtin.get_url:
    url: "{{ vpn_client_config_download }}"
    dest: /tmp/vpn_client_configs.zip
    mode: '0644'
  become: true
  tags:
    - install
    - config

- name: Ensure OpenVPN config directory exists
  ansible.builtin.file:
    path: "{{ vpn_client_config_dir }}/configs"
    state: directory
    mode: '0755'
  become: true
  tags:
    - install
    - config

- name: Unzip OpenVPN configs
  ansible.builtin.unarchive:
    src: /tmp/vpn_client_configs.zip
    dest: "{{ vpn_client_config_dir }}/configs"
    remote_src: true
  become: true
  tags:
    - install
    - config

- name: Create OpenVPN auth file with VPN credentials
  ansible.builtin.copy:
    dest: "{{ vpn_client_config_dir }}/server-auth.txt"
    content: |
      {{ vault_vpn_username }}
      {{ vault_vpn_password }}
    owner: root
    group: root
    mode: '0600'
  become: true
  tags:
    - install
    - config

- name: Ensure OpenVPN client.conf uses auth-user-pass
  ansible.builtin.lineinfile:
    path: "{{ vpn_client_config_dir }}/configs/{{ vpn_client_server_hostname }}.ovpn"
    regexp: '^auth-user-pass'
    line: 'auth-user-pass {{ vpn_client_config_dir }}/server-auth.txt'
    state: present
  become: true
  tags:
    - install
    - config

# - name: Ensure OpenVPN config includes AES-256-CBC in data-ciphers
#   ansible.builtin.lineinfile:
#     path: "{{ vpn_client_config_dir }}/configs/{{ vpn_client_server_hostname }}.ovpn"
#     regexp: '^data-ciphers'
#     line: 'data-ciphers AES-256-GCM:AES-128-GCM:CHACHA20-POLY1305:AES-256-CBC'
#     state: present
#   become: true
#   tags:
#     - install
#     - config

- name: Enable OpenVPN config "{{ vpn_client_server_hostname }}.ovpn" as /etc/openvpn/client.conf (symlink)
  ansible.builtin.file:
    src: "{{ vpn_client_config_dir }}/configs/{{ vpn_client_server_hostname }}.ovpn"
    dest: "{{ vpn_client_config_file }}"
    state: link
    force: true
  become: true
  tags:
    - install
    - config



## 04. SETUP UFW KILL SWITCH
# This section sets up the UFW VPN kill switch rules to block all traffic
# that is not going through the VPN interface (tun0) and allows local network access.
# -----------------------------------------------------------------------------

- name: Get VPN server hostname from client.conf for "{{ networking_openvpn_client.vpn_server }}.ovpn"
  ansible.builtin.shell: |
    grep '^remote ' {{ vpn_client_config_dir }}/configs/{{ networking_openvpn_client.vpn_server }}.ovpn | awk '{print $2}' | head -n1
  register: vpn_server_hostname
  changed_when: false
  tags:
    - install
    - config

- name: Set VPN server hostname as Ansible fact
  ansible.builtin.set_fact:
    vpn_server_hostname_fact: "{{ vpn_server_hostname.stdout }}"
  tags:
    - install
    - config

- name: Get VPN server port from client.conf
  ansible.builtin.shell: |
    grep '^remote ' {{ vpn_client_config_dir }}/configs/{{ networking_openvpn_client.vpn_server }}.ovpn | awk '{print $3}' | head -n1
  register: vpn_client_server_port
  changed_when: false
  tags:
    - install
    - config

- name: Resolve all VPN server IPs
  ansible.builtin.shell: |
    getent ahosts "{{ vpn_server_hostname.stdout }}" | awk '{print $1}' | sort -u
  register: vpn_client_server_ips_raw
  changed_when: false
  tags:
    - install
    - config

- name: Set VPN server IPs as Ansible fact
  ansible.builtin.set_fact:
    vpn_client_server_ips: "{{ vpn_client_server_ips_raw.stdout_lines }}"
  tags:
    - install
    - config

- name: Set VPN server Port "{{ vpn_client_server_port.stdout }}" as Ansible fact
  ansible.builtin.set_fact:
    vpn_client_server_port: "{{ vpn_client_server_port.stdout }}"
  when: vpn_client_server_port.stdout != ''
  tags:
    - install
    - config

- name: Get wired network interface name (excluding loopback and virtual)
  ansible.builtin.shell: |
    ip -o link show | awk -F': ' '{print $2}' | grep -E '^(en|eth)' | grep -v 'lo' | head -n1
  register: wired_interface
  changed_when: false
  tags:
    - debug
    - install
    - config

- name: Set wired network interface as Ansible fact
  ansible.builtin.set_fact:
    vpn_client_primary_network_interface: "{{ wired_interface.stdout }}"
  when: wired_interface.stdout != ''
  tags:
    - facts
    - install
    - config

- name: Display VPN Kill Switch Facts
  ansible.builtin.debug:
    msg:
      - "Fact -> vpn_client_server_ips: {{ vpn_client_server_ips }}"
      - "Fact -> vpn_client_server_port: {{ vpn_client_server_port }}"
      - "Fact -> vpn_client_primary_network_interface: {{ vpn_client_primary_network_interface }}"
  tags:
    - debug

- name: Backup original UFW before.rules if not already backed up
  ansible.builtin.copy:
    src: /etc/ufw/before.rules
    dest: /etc/ufw/before.rules.orig
    remote_src: true
    owner: root
    group: root
    mode: '0644'
    force: false
  become: true
  tags:
    - install
    - config

- name: Deploy UFW kill switch rules file
  ansible.builtin.template:
    src: templates/vpn-kill-switch-before.rules.j2
    dest: /etc/ufw/before.rules
    owner: root
    group: root
    mode: '0644'
  become: true
  tags:
    - install
    - config

- name: Restore original UFW before.rules from backup
  ansible.builtin.copy:
    src: /etc/ufw/before.rules.orig
    dest: /etc/ufw/before.rules
    owner: root
    group: root
    mode: '0644'
    remote_src: true
    force: true
  become: true
  tags:
    - never
    - uninstall
    - restore

- name: Deploy static route for VPN clients
  ansible.builtin.template:
    src: templates/vpn-static-unifi-vpn-route.network.j2
    dest: /etc/systemd/network/10-{{ vpn_client_primary_network_interface }}-static-unifi-vpn-route.network
    owner: root
    group: root
    mode: '0644'
  become: true
  tags:
    - install
    - config

- name: Restart systemd-networkd to enable static route
  ansible.builtin.systemd:
    name: systemd-networkd
    state: restarted
  become: true
  tags:
    - install
    - config

- name: Deploy VPN server update script
  ansible.builtin.template:
    src: templates/vpn-dynamic-server-update.sh.j2
    dest: "{{ vpn_server_dynamic_update_script }}"
    owner: root
    group: root
    mode: '0700'
  become: true
  tags: [install, config]

- name: Deploy VPN server update service
  ansible.builtin.template:
    src: templates/vpn-server-update.service.j2
    dest: /lib/systemd/system/vpn-server-update.service
    owner: root
    group: root
    mode: '0700'
  tags: [install, config, systemd]

- name: Verify VPN server update service is valid
  ansible.builtin.command: systemd-analyze verify /lib/systemd/system/vpn-server-update.service
  register: systemd_verify
  changed_when: false
  failed_when: systemd_verify.rc != 0
  become: true
  tags: [install, config, systemd, verify]

- name: Enable VPN server update service
  ansible.builtin.systemd:
    daemon_reload: true
    name: vpn-server-update.service
    enabled: true
    state: started
  become: true
  tags: [install, config, systemd]

- name: Deploy VPN server update timer"
  ansible.builtin.template:
    src: templates/vpn-server-update.timer.j2
    dest: /lib/systemd/system/vpn-server-update.timer
    owner: root
    group: root
    mode: '0700'
  become: true
  tags: [install, config, systemd]

- name: Enable VPN server update timer
  ansible.builtin.systemd:
    daemon_reload: true
    name: vpn-server-update.timer
    enabled: true
    state: started
  become: true
  tags: [install, config, systemd]

- name: Ensure UFW is enabled
  community.general.ufw:
    state: enabled
  become: true
  tags:
    - install
    - config
    - restore

- name: Reload UFW to apply new rules
  community.general.ufw:
    state: reloaded
  become: true
  changed_when: false
  tags:
    - install
    - config
    - restore

- name: Insert OpenVPN Alloy block to config.alloy from template
  ansible.builtin.blockinfile:
    path: /etc/alloy/config.alloy
    marker: "// {mark} ANSIBLE MANAGED BLOCK: {{ vpn_client_systemd_name }} logs"
    insertbefore: "//////////////////////////// ADD ABOVE THE LINE ///////////////////////////////"
    block: "{{ lookup('template', 'templates/vpn-alloy-block.alloy.j2') }}"
  become: true
  notify: Alloy Restart
  tags: [install, config, monitoring]

- name: Deploy custom OpenVPN client systemd service unit
  ansible.builtin.template:
    src: templates/openvpn-client-systemd.service.j2
    dest: /lib/systemd/system/openvpn-client@.service
    owner: root
    group: root
    mode: '0644'
  become: true
  tags:
    - install
    - config
    - systemd

- name: Enable and start OpenVPN client service
  ansible.builtin.systemd:
    name: openvpn@client
    enabled: true
    state: restarted
    daemon_reload: true
  become: true
  tags:
    - install
    - config

- name: Enable and restart openvpn@client if not already enabled
  ansible.builtin.service:
    name: openvpn@client
    state: restarted
    enabled: true
    daemon_reload: true
  become: true
  tags:
    - install
    - config
    - restore



## HEALTH CHECKS
# Confirm the operations of the openvpn & kill switch
# ------------------------------------------------------------------------------

- name: Check OpenVPN client service status
  ansible.builtin.systemd:
    name: openvpn@client
  register: openvpn_service_status
  become: true
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Assert OpenVPN is running
  ansible.builtin.assert:
    that:
      - openvpn_service_status.status.ActiveState == "active"
    fail_msg: "OpenVPN service is not running! Status: {{ openvpn_service_status.status.ActiveState }}"
    success_msg: "OpenVPN service is running successfully."
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Wait for VPN interface (tun0) to be up
  ansible.builtin.wait_for:
    path: /sys/class/net/tun0
    state: present
    timeout: 30
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Assert VPN interface (tun0) is up
  ansible.builtin.command: ip link show tun0
  register: tun0_status
  changed_when: false
  failed_when: tun0_status.rc != 0
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Assert VPN interface (tun0) is up (status check)
  ansible.builtin.assert:
    that:
      - tun0_status.rc == 0
    fail_msg: "VPN interface tun0 is not up! Status: {{ tun0_status.stdout }}"
    success_msg: "VPN interface tun0 is up and running."
  tags:
    - install
    - config
    - verify

- name: Check UFW status
  ansible.builtin.command: ufw status
  register: ufw_status
  changed_when: false
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Assert UFW is enabled, else kill switch will not work
  ansible.builtin.assert:
    that:
      - "'Status: active' in ufw_status.stdout"
    fail_msg: "UFW is NOT enabled!"
    success_msg: "UFW is enabled and active."
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check external IP address of Ansible control node
  ansible.builtin.uri:
    url: https://api.ipify.org
    return_content: true
  register: host_external_ip
  delegate_to: thinkpad
  run_once: true
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check external IP address (should be VPN, not your ISP)
  ansible.builtin.uri:
    url: https://api.ipify.org
    return_content: true
  register: external_ip
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Assert VPN is working (external IPs should be different)
  ansible.builtin.assert:
    that:
      - host_external_ip.content != external_ip.content
    fail_msg: "VPN is NOT working! Control node and client have the same external IP: {{ external_ip.content }}"
    success_msg:
      - "VPN is working correctly."
      - "Control node external IP:             {{ host_external_ip.content }}"
      - "Client external IP (should be VPN):   {{ external_ip.content }}"
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Check if VPN interface (tun0) is up
  ansible.builtin.command: ip link show tun0
  register: tun0_status
  failed_when: tun0_status.rc != 0
  changed_when: false
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Assert VPN interface (tun0) is up
  ansible.builtin.assert:
    that:
      - tun0_status.rc == 0
    fail_msg: "VPN interface tun0 is not up! Status: {{ tun0_status.stdout }}"
    success_msg: "VPN interface tun0 is up and running."
  tags:
    - install
    - config
    - verify
    - healthcheck

- name: Test VPN kill switch functionality
  become: true
  tags:
    - install
    - config
    - verify
    - healthcheck
  block:
    - name: Stop OpenVPN service to test kill switch
      ansible.builtin.systemd:
        name: openvpn@client
        state: stopped

    - name: Pause for 2 seconds to ensure service is fully down
      ansible.builtin.pause:
        seconds: 2

    - name: Test external connectivity with VPN down (should fail)
      ansible.builtin.uri:
        url: https://api.ipify.org
        timeout: 5
      register: killswitch_test_result
      ignore_errors: true

    - name: Assert kill switch is working (traffic should be blocked)
      ansible.builtin.assert:
        that:
          - killswitch_test_result.failed
        fail_msg: "Kill switch is NOT working! Traffic was not blocked when VPN was down."
        success_msg: "Kill switch is working correctly - traffic was blocked when VPN was down."

  always:
    - name: Restart OpenVPN service after kill switch test
      ansible.builtin.systemd:
        name: openvpn@client
        state: restarted
        enabled: true



## 99 Uninstall OpenVPN services
# This sections uninstalls and removes configuration files
# -----------------------------------------------------------------------------

- name: Confirm OpenVPN uninstallation
  ansible.builtin.pause:
    prompt: |
      ⚠️  WARNING: VPN Client Uninstallation Confirmation ⚠️

      You are about to completely uninstall the VPN Client service from this system.
      
      This will remove:
      🗑️  OpenVPN APT package
      🗑️  Configuration files: {{ vpn_client_config_dir }}/
      🗑️  UFW firewall rules: before.conf
      🗑️  Prometheus scraper config: /etc/prometheus/conf.d/openvpn-scraper.yml

      ❗ This action will stop metrics collection from your VPN Client instance!
      📊 Historical metrics data in Prometheus will be preserved
      
      Are you sure you want to proceed with the uninstallation? (yes/no)
  register: uninstall_confirmation
  tags: [never, uninstall]

- name: Uninstallation Aborted
  ansible.builtin.fail:
    msg: |
      🛑 Uninstallation aborted by user
      
      The openvpn service remains installed and operational.
      No changes have been made to the system.
  when: not (uninstall_confirmation.user_input | bool)
  tags: [never, uninstall]

- name: Stop and disable OpenVPN service for uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.systemd:
    name: "{{ vpn_client_systemd_name }}"
    state: stopped
    enabled: no
  become: true
  failed_when: false
  tags: [never, uninstall]

- name: Uninstall OpenVPN package
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.apt:
    name:
      - openvpn
    state: absent
    update_cache: true
  become: true
  tags: [never, uninstall]

- name: Remove OpenVPN config folder
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop:
    - { path: "{{ vpn_client_config_dir }}",   mode: "u=rwx,g=rw,o=" }
  become: true
  tags: [never, uninstall]

- name: Stop and disable vpn-server-update.timer during uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.systemd:
    name: vpn-server-update.timer
    state: stopped
    enabled: false
    daemon_reload: true
  become: true
  tags: [never, uninstall]

- name: Stop and disable vpn-server-update.service during uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.systemd:
    name: vpn-server-update.service
    state: stopped
    enabled: false
    daemon_reload: true
  become: true
  tags: [never, uninstall]

- name: Remove vpn-server-update.timer unit file during uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.file:
    path: /lib/systemd/system/vpn-server-update.timer
    state: absent
  become: true
  tags: [never, uninstall]

- name: Remove vpn-server-update.service unit file during uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.file:
    path: /lib/systemd/system/vpn-server-update.service
    state: absent
  become: true
  tags: [never, uninstall]

- name: Remove vpn-server-update bash script during uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.file:
    path: /usr/local/sbin/vpn-dynamic-server-update.sh
    state: absent
  become: true
  tags: [never, unisntall]

- name: Restore original UFW before.rules from backup during uninstallation
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.copy:
    src: /etc/ufw/before.rules.orig
    dest: /etc/ufw/before.rules
    owner: root
    group: root
    mode: '0644'
    remote_src: true
    force: true
  become: true
  tags: [never, uninstall, restor]

- name: Remove static route for VPN clients
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.file:
    path: /etc/systemd/network/10-{{ vpn_client_primary_network_interface }}-static-unifi-vpn-route.network
    state: absent
  become: true
  tags: [never, uninstall]

- name: Restart systemd-networkd to enable static route
  when: uninstall_confirmation.user_input | bool
  ansible.builtin.systemd:
    name: systemd-networkd
    state: restarted
  become: true
  tags: [never, uninstall]
